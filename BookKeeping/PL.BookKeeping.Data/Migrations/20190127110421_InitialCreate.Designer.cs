// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PL.BookKeeping.Data;

namespace PL.BookKeeping.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190127110421_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("PL.BookKeeping.Entities.Entry", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDT");

                    b.Property<int?>("CreatorKey");

                    b.Property<string>("Description")
                        .HasMaxLength(40);

                    b.Property<int?>("ParentEntryKey");

                    b.HasKey("Key");

                    b.HasIndex("CreatorKey");

                    b.HasIndex("ParentEntryKey");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.EntryPeriod", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDT");

                    b.Property<int?>("CreatorKey");

                    b.Property<int>("EntryKey");

                    b.Property<int>("PeriodKey");

                    b.Property<decimal>("TotalAmount");

                    b.HasKey("Key");

                    b.HasIndex("CreatorKey");

                    b.HasIndex("EntryKey");

                    b.HasIndex("PeriodKey");

                    b.ToTable("EntryPeriods");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.Period", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDT");

                    b.Property<int?>("CreatorKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("PeriodEnd");

                    b.Property<DateTime>("PeriodStart");

                    b.Property<int>("Year");

                    b.HasKey("Key");

                    b.HasIndex("CreatorKey");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.ProcessingRule", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountRule");

                    b.Property<string>("AmountRule");

                    b.Property<string>("CodeRule");

                    b.Property<string>("CounterAccountRule");

                    b.Property<DateTime>("CreationDT");

                    b.Property<int?>("CreatorKey");

                    b.Property<int?>("EntryKey");

                    b.Property<string>("MutationKindRule");

                    b.Property<int?>("MutationTypeRule");

                    b.Property<string>("NameRule");

                    b.Property<int>("Priority");

                    b.Property<string>("RemarksRule");

                    b.HasKey("Key");

                    b.HasIndex("CreatorKey");

                    b.HasIndex("EntryKey");

                    b.ToTable("ProcessingRules");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.Transaction", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<decimal>("Amount");

                    b.Property<string>("Code")
                        .HasMaxLength(2);

                    b.Property<string>("CounterAccount")
                        .HasMaxLength(27);

                    b.Property<DateTime>("CreationDT");

                    b.Property<int?>("CreatorKey");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("EntryPeriodKey");

                    b.Property<int>("FingerPrint");

                    b.Property<string>("MutationKind")
                        .HasMaxLength(20);

                    b.Property<int>("MutationType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.HasKey("Key");

                    b.HasIndex("CreatorKey");

                    b.HasIndex("EntryPeriodKey");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.User", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDT");

                    b.Property<int?>("CreatorKey");

                    b.Property<string>("Name");

                    b.HasKey("Key");

                    b.HasIndex("CreatorKey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.Entry", b =>
                {
                    b.HasOne("PL.BookKeeping.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorKey");

                    b.HasOne("PL.BookKeeping.Entities.Entry", "ParentEntry")
                        .WithMany("ChildEntries")
                        .HasForeignKey("ParentEntryKey");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.EntryPeriod", b =>
                {
                    b.HasOne("PL.BookKeeping.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorKey");

                    b.HasOne("PL.BookKeeping.Entities.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PL.BookKeeping.Entities.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.Period", b =>
                {
                    b.HasOne("PL.BookKeeping.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorKey");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.ProcessingRule", b =>
                {
                    b.HasOne("PL.BookKeeping.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorKey");

                    b.HasOne("PL.BookKeeping.Entities.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryKey");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.Transaction", b =>
                {
                    b.HasOne("PL.BookKeeping.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorKey");

                    b.HasOne("PL.BookKeeping.Entities.EntryPeriod", "EntryPeriod")
                        .WithMany("Transactions")
                        .HasForeignKey("EntryPeriodKey");
                });

            modelBuilder.Entity("PL.BookKeeping.Entities.User", b =>
                {
                    b.HasOne("PL.BookKeeping.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorKey");
                });
#pragma warning restore 612, 618
        }
    }
}
